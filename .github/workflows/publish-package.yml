# Publish to PyPI and DockerHub when new release, if tests pass
name: Publish package

on:
  release:
    types: [created]

jobs:

  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        python setup.py pytest
  
  # Generate documentation in docs/ with pydoc-markdown
  generate-docs:
    needs: tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pydoc-markdown

    - name: Generate docs
      run: |
        pydoc-markdown --render-toc -p openpredict > docs/README.md

    - name: Hotfix generated docs
      run: |
        find docs/README.md -type f -exec sed -i "s/# Table of Contents/# OpenPredict Package documentation üîÆüêç/g" {} +

    - name: Commit and push
      run: |
        git config --global user.name 'Vincent Emonet'
        git config --global user.email 'vincent.emonet@maastrichtuniversity.nl'
        git commit -am "Automatically generate documentation for OpenPredict Python package üìñ"
        git push

  publish:
    needs: tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine

    - name: Build and publish to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*

  docker-push:
    needs: tests
    runs-on: ubuntu-latest

    steps:
    - uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        repository: umids/openpredict-api
        tag_with_ref: true
        # Use env var GITHUB_TAG (set auto from git repo)