name: Run tests
# Run test at each push to master, if changes to package or tests files
on:
  workflow_dispatch:
  push:
    branches: [ master ]
    paths:
    - 'requirements.txt'
    - 'openpredict/**'
    - 'tests/**'
    - '.github/workflows/run-tests.yml'

jobs:

  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # warnings if there are Python syntax errors or undefined names 
        # (remove --exit-zero to fail when syntax error)
        flake8 . --count --exit-zero --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: python setup.py pytest


  tests-spark:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/setup-java@v1
      with:
        java-version: '11' # The JDK version to make available on the path.
    - uses: vemonet/setup-spark@v1
      with:
        spark-version: '3.0.1'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        coverage erase
        pytest --cov --cov-report xml:coverage.xml tests/*
        coverage combine --append || true
        coverage report
        coverage xml
      # sonar-scanner
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

